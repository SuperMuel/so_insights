from typing import TYPE_CHECKING, Any, TypeVar, Union, cast

from attrs import define as _attrs_define
from attrs import field as _attrs_field

from ..models.analysis_type import AnalysisType
from ..types import UNSET, Unset

if TYPE_CHECKING:
    from ..models.topic import Topic


T = TypeVar("T", bound="AgenticAnalysisResult")


@_attrs_define
class AgenticAnalysisResult:
    """Results specific to agentic analysis.

    Attributes:
        topics (list['Topic']): List of topics generated by the agentic analysis
        summary (str): Overall summary of the agentic analysis
        relevant_articles_ids (list[str]): IDs of articles deemed relevant and used in the report
        analysis_type (Union[Unset, AnalysisType]):
    """

    topics: list["Topic"]
    summary: str
    relevant_articles_ids: list[str]
    analysis_type: Union[Unset, AnalysisType] = UNSET
    additional_properties: dict[str, Any] = _attrs_field(init=False, factory=dict)

    def to_dict(self) -> dict[str, Any]:
        topics = []
        for topics_item_data in self.topics:
            topics_item = topics_item_data.to_dict()
            topics.append(topics_item)

        summary = self.summary

        relevant_articles_ids = self.relevant_articles_ids

        analysis_type: Union[Unset, str] = UNSET
        if not isinstance(self.analysis_type, Unset):
            analysis_type = self.analysis_type.value

        field_dict: dict[str, Any] = {}
        field_dict.update(self.additional_properties)
        field_dict.update(
            {
                "topics": topics,
                "summary": summary,
                "relevant_articles_ids": relevant_articles_ids,
            }
        )
        if analysis_type is not UNSET:
            field_dict["analysis_type"] = analysis_type

        return field_dict

    @classmethod
    def from_dict(cls: type[T], src_dict: dict[str, Any]) -> T:
        from ..models.topic import Topic

        d = src_dict.copy()
        topics = []
        _topics = d.pop("topics")
        for topics_item_data in _topics:
            topics_item = Topic.from_dict(topics_item_data)

            topics.append(topics_item)

        summary = d.pop("summary")

        relevant_articles_ids = cast(list[str], d.pop("relevant_articles_ids"))

        _analysis_type = d.pop("analysis_type", UNSET)
        analysis_type: Union[Unset, AnalysisType]
        if isinstance(_analysis_type, Unset):
            analysis_type = UNSET
        else:
            analysis_type = AnalysisType(_analysis_type)

        agentic_analysis_result = cls(
            topics=topics,
            summary=summary,
            relevant_articles_ids=relevant_articles_ids,
            analysis_type=analysis_type,
        )

        agentic_analysis_result.additional_properties = d
        return agentic_analysis_result

    @property
    def additional_keys(self) -> list[str]:
        return list(self.additional_properties.keys())

    def __getitem__(self, key: str) -> Any:
        return self.additional_properties[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.additional_properties[key] = value

    def __delitem__(self, key: str) -> None:
        del self.additional_properties[key]

    def __contains__(self, key: str) -> bool:
        return key in self.additional_properties
